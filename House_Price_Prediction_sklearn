{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/S0nd0s/house/blob/main/House_Price_Prediction_sklearn\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },

    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "j6piU9Wkqjrd"
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv(\"train.csv\")\n",
        "df.drop(columns=[\"Id\"],inplace=True)\n",
        "df.head()\n",
        "x = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',\n",
        "\n",
        "       'Avg. Area Number of Bedrooms', 'Area Population']]\n",
        "\n",
        "y = df['Price']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A4N11o5yqjre"
      },
      "source": [
        "### Handle the missing data (NaNs)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Y5uaHGzCqjrf"
      },
      "outputs": [],
      "source": [
        "df.drop(columns=df.columns[df.isnull().sum().values>200],inplace=True)\n",
        "df.dropna(inplace=True)\n",
        "df.isnull().sum().values"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F7HGfjcfqjrg"
      },
      "source": [
        "### Replace categorical data (strings) with numerical values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tvTdHET7qjrh"
      },
      "outputs": [],
      "source": [
        "obj_to_replace = df[\"MSZoning\"].dtype\n",
        "\n",
        "for column in df.columns:\n",
        "    if df[column].dtype == obj_to_replace:\n",
        "        uniques = np.unique(df[column].values)\n",
        "        for idx,item in enumerate(uniques):\n",
        "            df[column] = df[column].replace(item,idx)\n",
        "            \n",
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pkqxHW_nqjri"
      },
      "source": [
        "### Add the bias column (column of ones)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2TF8qnQRqjrj"
      },
      "outputs": [],
      "source": [
        "df[\"bias\"] = np.ones(df.shape[0])\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tRWLcaczqjrk"
      },
      "source": [
        "### Divide the data into training, testing, X, and y"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tXLPVfuoqjrl"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ifqKAKNaqjrl"
      },
      "source": [
        "### Train the linear regressor"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xm20BklAqjrm"
      },
      "source": [
        "### Train using the sklearn linear regressor"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G7ya9dDiqjrn"
      },
      "outputs": [],
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        
        "model = LinearRegression()\n",
        
        "model.fit(x_train, y_train)\n",
       
        "print(model.coef_)\n",
        
        "print(model.intercept_)\n",
        
        "pd.DataFrame(model.coef_, x.columns, columns = ['Coeff'])\n",
        
        "predictions = model.predict(x_test)\n",
       
        "# plt.scatter(y_test, predictions)\n",
       
        "plt.hist(y_test - predictions)\n",
        
        "from sklearn import metrics\n",
       
        "metrics.mean_absolute_error(y_test, predictions)\n",
       
        "metrics.mean_squared_error(y_test, predictions)\n",
       
        "np.sqrt(metrics.mean_squared_error(y_test, predictions))\n",
        

      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.9"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
